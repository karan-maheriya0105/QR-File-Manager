// <auto-generated />
using System;
using BrochureAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BrochureAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250714050615_AddRefreshTokenToUser")]
    partial class AddRefreshTokenToUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BrochureAPI.Models.Category", b =>
                {
                    b.Property<string>("StrGUID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StrCategory")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StrFileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StrFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StrQRCode")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("StrGUID");

                    b.HasIndex("StrCategory")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BrochureAPI.Models.ClientForm", b =>
                {
                    b.Property<string>("StrGUID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StrCategoryGUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StrEmailId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StrName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StrPhoneNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("StrGUID");

                    b.HasIndex("StrCategoryGUID");

                    b.ToTable("ClientForms");
                });

            modelBuilder.Entity("BrochureAPI.Models.CompanyProfile", b =>
                {
                    b.Property<string>("StrGUID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StrAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StrCompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StrDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StrEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StrLogoPath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StrPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StrWebsite")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("StrGUID");

                    b.ToTable("CompanyProfiles");
                });

            modelBuilder.Entity("BrochureAPI.Models.User", b =>
                {
                    b.Property<string>("StrGUID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("BolIsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StrEmailId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StrName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StrPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StrGUID");

                    b.HasIndex("StrEmailId")
                        .IsUnique();

                    b.HasIndex("StrName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BrochureAPI.Models.ClientForm", b =>
                {
                    b.HasOne("BrochureAPI.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("StrCategoryGUID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
